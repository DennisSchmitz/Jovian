#!/bin/bash
set -euo pipefail
#set -v
#set -x

VERSION="0.9.0"
INSTALL_LOG="jovian_installation_log.txt"

#Default values
INPUT_DIR="raw_data/"
JOVIAN_HELP="FALSE"
SNAKEMAKE_HELP="FALSE"
INSTALL_CONDA="FALSE"
INSTALL_IGVJS="FALSE"
INSTALL_DB="FALSE"
CLEAN="FALSE"
SHEET_SUCCESS="FALSE"


###### TO-DO'S
# read-length code van Anita
# optie voor MiSeq of NextSeq
# Databases aanmaken en controleren
# Zippen output
# Checken of alle dbs bestaan --> anders error
# pipeline parameters via CLI meegeven ipv config.yaml
# start the jupyter notebook, if already running, then print token.
### Update theme and plugins
# Start nginx?
# Render jup NB?

#functions
next() {
    printf "%-70s\n" "#" | sed 's/\s/#/g'
}
spinner() {
    PID=$!
    i=1
    sp="/-\|"
    echo -n ' '
    while [ -d /proc/$PID ]
    do
        printf "\b${sp:i++%${#sp}:1}"
        sleep 0.5
    done
    printf "\b"
}

## Introduction

clear
next
    echo -e "Welcome to Jovian, the easy and user-friendly metagenomics pipeline"
    echo -e "You are using Jovian version $VERSION\n\n"
    echo -e "Please keep in mind that this pipeline is still a work-in-progress"
    echo -e "It is expected that several portions are unstable until release 1.0.0"
next


### Parse the jovian commandline arguments, if they are not part of jovian, they get send to Snakemake
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -i|--input)
        INPUT_DIR="$2"
        shift # Next
        shift # Next
        ;;
        -h|--help)
        JOVIAN_HELP="TRUE"
        shift # Next
        ;;
        -sh|--snakemake-help)
        SNAKEMAKE_HELP="TRUE"
        shift # Next
        ;;
        -ic|--install-dependencies)
        INSTALL_CONDA="TRUE"
        shift # Next
        ;;
        -ii|--install-igvjs)
        INSTALL_IGVJS="TRUE"
        shift # Next
        ;;
        -id|--install-databases)
        INSTALL_DB="TRUE"
        shift # Next
        ;;
        --clean)
        CLEAN="TRUE"
        shift # Next
        ;;
        --archive)
        ARCHIVE="TRUE"
        shift # Next
        ;;
        *) # Any other option
        POSITIONAL+=("$1") # save in array
        shift # Next
        ;;
    esac
done
set -- "${POSITIONAL[@]:-}" # Restores the positional arguments (i.e. without the case arguments above) which then can be called via `$@` or `$[0-9]` etc. These parameters are send to Snakemake.

### Check the jovian CLI arguments and do stuff
if [ "${CLEAN:-}" == "TRUE" ]; then
    echo -e "The following files and folders will be deleted:\ndata/\nlogs/\nresults/\nsample_sheet.yaml\n\n"
    read -r -p "Are you sure you wish to permanently delete these files and folders? [y/N] " response
    response=${response,,}
    if [[ "$response" =~ ^(yes|y)$ ]]; then
        echo -e "Removing Jovian output: data/ logs/ results/ sample_sheet.yaml"
        rm -rf data/
        rm -rf logs/
        rm -rf results/
        rm sample_sheet.yaml
    fi
    exit 0
fi
if [ "${JOVIAN_HELP:-}" == "TRUE" ]; then # Print Jovian help message
    cat <<HELP_USAGE
Jovian, version $VERSION, built with Snakemake
  Usage: bash $0 -i <INPUT_DIR> <arguments>
Input:
  --input -i DIR               This is the folder containing your input fastq files.
                               N.B. pathing must be relative from current directory.
                               N.B. It is only designed for Illumina paired-end data.
Output:
  data/                        Contains detailed intermediate files
  logs/                        Contains all log files
  results/                     Contains all final results, these are visualized via the
                               web-report (Notebook_report.ipynb)
Parameters:
  --help -h                    Print the Jovian help document
  --snakemake-help -sh         Print the Snakemake help document
  --clean                      Removes Jovian output
  --keep-going -k              Useful snakemake command: Go on with independent jobs if
                               a job fails.
  --dry-run -n                 Useful snakemake command: Do not execute anything, and
                               display what would be done.
  --unlock                     Useful snakemake command: Remove a lock on the working
                               directory.
  --quiet -q                   Useful snakemake command: Do not output any progress or
                               rule information.
Installation:
  --install-dependencies -ic   Install the required software dependencies
  --install-igvjs -ii          Install IGVjs dependency
  --install-databases -id      Install required databases
HELP_USAGE
    exit 0
fi

if [ "${ARCHIVE:-}" == "TRUE" ]; then
    echo -e "\n\nArchiving the Jovian data and results can take several hours depending on the size of your dataset(s)."
    echo -e "This archiving process will NOT include the raw dataset in the final archive"
    echo -e "\nIt is advised to run the archiving process overnight, it is strongly advised to not stop the process once you started it"
    read -r -p "Do you want to start the Jovian archiving process now? [y/N] " archive_answer
    archive_answer=${archive_answer,,}
    if [[ "$archive_answer" =~ ^(yes|y)$ ]]; then
        echo -e "\n\nStarting the archiving process\n\n"
        
        if [ -e data/ ]; then
            echo -e "Found the 'data/' folder, appending to archive..."
            (tar --append --file=archive.tar data/) &
            spinner
        else
            echo -e "Couldn't find the 'data/' folder in this working directory, skipping this folder in archiving"
        fi

        if [ -e logs/ ]; then
            echo -e "Found the 'logs/' folder, appending to archive..."
            (tar --append --file=archive.tar logs/) &
            spinner
        else
            echo -e "Couldn't find the 'data/' folder in this working directory, skipping this folder in archiving"
        fi
        
        if [ -e results/ ]; then
            echo -e "Found the 'results/' folder, appending to archive..."
            (tar --append --file=archive.tar results/) &
            spinner
        else
            echo -e "Couldn't find the 'results/' folder in this working directory, skipping this folder in archiving"
        fi
        
        if [ -e sample_sheet.yaml ]; then
            echo -e "Found 'sample_sheet.yaml', appending to archive..."
            (tar --append --file=archive.tar sample_sheet.yaml) &
            spinner
        else
            echo -e "Couldn't find the file 'sample_sheet.yaml' in this working directory, skipping this file in archiving"
        fi
        
        if [ -e archive.tar ]; then
            echo -e "\n\nFiles and folders have been appended to the archive."
            echo -e "Compressing archive..."
            (gzip archive.tar) &
            spinner
        else
            echo "No files and folders could be found for archiving."
            exit 1
        fi
    else
        echo -e "Aborting the archiving proces..."
        exit 0
    fi
exit 0
fi

### Pre-flight check: Assess availability of required files, conda and Jovian_master environment

PATH_JOVIAN_MASTER_YAML="envs/Jovian_master_environment.yaml"
MASTER_NAME=$(head -n 1 $PATH_JOVIAN_MASTER_YAML | cut -f2 -d ' ') # Extract Conda environment name as specified in yaml file
PATH_JOVIAN_HELPER_YAML="envs/Jovian_helper_environment.yaml"
HELPER_NAME=$(head -n 1 $PATH_JOVIAN_HELPER_YAML | cut -f2 -d ' ') # Extract Conda environment name as specified in yaml file
PROFILE="profile"

if [ ! -e "$PATH_JOVIAN_MASTER_YAML" ]; then # If this yaml file does not exist, give error.
    echo -e "ERROR: Missing file \"${PATH_JOVIAN_MASTER_YAML}\""
    exit 1
elif [ ! -e "$PATH_JOVIAN_HELPER_YAML" ]; then # If this yaml file does not exist, give error.
    echo -e "ERROR: Missing file \"${PATH_JOVIAN_HELPER_YAML}\""
    exit 1
elif [ ! -e "${PROFILE}/config.yaml" ]; then # If this profile folder containing config.yaml does not exist, give error.
    echo -e "ERROR: Missing file \"${PROFILE}/config.yaml\""
    exit 1
elif ! command -v conda > /dev/null; then # Check if conda is not installed (i.e. the `conda` command is not available), if true, install it in ~/tmp. Otherwise, proceed.

    ### confirmation of conda installation
    echo -e "\n\n"
    echo -e "Miniconda missing. Installing Miniconda can take up to 15 minutes..."
    read -r -p "Do you wish to install (mini)conda now? [y/N] " response
    response=${response,,}
    if [[ "$response" =~ ^(yes|y)$ ]]; then
        echo "Jovian $VERSION" > $INSTALL_LOG
        next | tee -a $INSTALL_LOG
        curl -o latest.sh -L https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
        chmod +x latest.sh
        sh latest.sh -b -p "${HOME}/tmp/Miniconda3" | tee -a $INSTALL_LOG
        rm latest.sh
        clear
        next
    else
        echo -e "Conda is a requirement for Jovian to run."
        echo -e "Exiting because conda isn't installed and automatic installation of conda was declined by user"
        exit 1
    fi
    
    ### conda has been installed by previous step, confirm addition to PATH
    echo -e "Conda is installed but not yet added to PATH, do you wish to add conda to your PATH?"
    read -r -p "The conda PATH will be added to your ~/.bash_profile and will only affect you. [y/N] " answer
    answer=${answer,,}
    if [[ "$answer" =~ ^(yes|y)$ ]]; then
        echo "PATH=$PATH:${HOME}/tmp/Miniconda3/bin" >> "${HOME}/.bash_profile" | tee -a $INSTALL_LOG
        source ${HOME}/.bash_profile | tee -a $INSTALL_LOG
        tput reset
        next
        echo -e "Conda succesfully added to PATH"
    else
        export PATH=${HOME}/tmp/Miniconda3/bin:$PATH | tee -a $INSTALL_LOG
        tput reset
        next
        echo -e "Conda has not been permanently added to PATH, this means you cannot use the conda command once this session closes."
    fi
    
    echo -e "\n"
    echo -e "Installation of Conda is done"
    source ${HOME}/.bash_profile

    echo -e "\n\nContinuing..."
    sleep 5
    tput reset
    next
        #export PYTHONPATH=~/tmp/Miniconda3/pkgs/   # Don't know if this is needed, have to ask Anita
        #export PERL5LIB=~/tmp/Miniconda3/lib/perl5/site_perl/5.22.0   # Don't know if this is needed, have to ask Anita
fi

if [[ $PATH != *$MASTER_NAME* ]]; then # If the master environment is not in your path (i.e. it is not currently active), do...
    set +ue # Turn bash strict mode off because that breaks conda
    source activate "$MASTER_NAME" # Try to activate this env
    if [ ! $? -eq 0 ]; then # If exit statement is not 0, i.e. master conda env hasn't been installed yet, do...
        read -r -p "The Jovian_master environment hasn't been installed yet, do you want to install this environment now? [y/N] " envanswer
        envanswer=${envanswer,,}
        if [[ "$envanswer" =~ ^(yes|y)$ ]]; then
            echo -e "\tInstalling Jovian master environment..." | tee -a $INSTALL_LOG   
            conda env create -f $PATH_JOVIAN_MASTER_YAML | tee -a $INSTALL_LOG # Create the env from the specified yaml file
            source activate $MASTER_NAME
            echo -e "DONE"
        else
            echo -e "The Jovian_master environment is a requirement. Exiting because Jovian cannot continue without this environment"
            exit 1
        fi
    fi
    set -ue # Turn bash strict mode on again
    echo -e "Succesfully activated Jovian_master environment"
fi
if [ "${INSTALL_DB:-}" == "TRUE" ]; then
    echo -e "Installing databases, this can take hours for a fresh installation..."
    if [[ $PATH != *$HELPER_NAME* ]]; then # If helper env is not in your path (i.e. it is not currently active), do...
        set +ue # Turn bash strict mode off because that breaks conda
        source activate $HELPER_NAME # Try to activate this env
        if [ ! $? -eq 0 ]; then # If exit statement is not 0, i.e. helper conda env hasn't been installed yet, do...
            echo -e "\tInstalling Jovian helper environment..."
            conda env create -f $PATH_JOVIAN_HELPER_YAML # Create the env from the specified yaml file
            source activate $HELPER_NAME
        fi
        set -ue # Turn bash strict mode on again
    fi
    echo -e "PLACEHOLDER for the actual DB update scripts"
    # The rest of the code is performed in the helper env, not in the master env. 
    # source deactivate # if you need to go back to the master_env. N.B. Wrap this command with set +u and set -u when working in strict bash mode.
    echo -e "DONE"
    exit 0
fi

if [ "${SNAKEMAKE_HELP:-}" == "TRUE" ]; then
    snakemake --help
    exit 0
fi

if [ "${INSTALL_CONDA:-}" == "TRUE" ]; then
    echo -e "\nInstalling required conda environments, this can take up to an hour..."
    snakemake --use-conda --create-envs-only --profile $PROFILE
    exit 0
fi
if [ "${INSTALL_IGVJS:-}" == "TRUE" ]; then
    echo -e "Installing IGVjs software, this can take up to 15 minutes..."
    bash bin/install_IGVjs.sh
    echo -e "DONE"
    exit 0
fi

if [ ! -e "${HOME}/.ncbirc" ]; then # If the BLAST required ~/.ncbirc does not exist, give error.
    echo -e "ERROR: Missing file \"~/.ncbirc\". \nThis is config file is required for BLAST to function, contains the locations to the BLAST databases on your local system. It should be in your home directory."
    exit 1
fi

### Pass other CLI arguments along to Snakemake
if [ ! -d ${INPUT_DIR} ]; then
    echo -e "The input directory specified (${INPUT_DIR}) does not exist"
    echo -e "Please specify an existing input directory"
    exit 1
fi

ZIPFILES=(${INPUT_DIR}*.gz)
FASTQFILES=(${INPUT_DIR}*.fastq)
FQFILES=(${INPUT_DIR}*.fq)
if [ -e $FASTQFILES ]; then
    echo -e "Files in input directory (${INPUT_DIR}) have .fastq format"
    echo -e "Generating sample sheet..."
    bin/generate_sample_sheet.py ${INPUT_DIR} > sample_sheet.yaml
    SHEET_SUCCESS="TRUE"
fi
if [ -e $FQFILES ]; then
    echo -e "Files in input directory (${INPUT_DIR}) have .fq format"
    echo -e "Generating sample sheet..."
    bin/generate_sample_sheet.py ${INPUT_DIR} > sample_sheet.yaml
    SHEET_SUCCESS="TRUE"
fi
if [ -e $ZIPFILES ]; then
    echo -e "Files in input directory (${INPUT_DIR}) are gzipped"
    echo -e "Generating sample sheet..."
    bin/generate_sample_sheet_zip.py ${INPUT_DIR} >> sample_sheet.yaml
    SHEET_SUCCESS="TRUE"
fi

if [ "$SHEET_SUCCESS" == "TRUE" ]; then
    echo -e "Succesfully generated the sample sheet"
else
    echo -e "Couldn't find files in the input directory that ended up being in a .FASTQ, .FQ or .GZ format"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the files are in one of the formats listed below"
    echo -e ".fastq.gz (Zipped Fastq)"
    echo -e ".fq.gz (Zipped Fq)"
    echo -e ".fastq (Unzipped Fastq)"
    echo -e ".fq (unzipped Fq)"
    exit 1
fi

if [ -e sample_sheet.yaml ]; then
    echo -e "Starting snakemake"
    set +ue #turn of bash strict mode because snakemake and conda can't work with it properly
    snakemake -s Snakefile --profile "${PROFILE}" ${@}
    set -ue #turn bash strict mode back on
else
    echo -e "Sample_sheet.yaml could not be found"
    echo -e "This also means that Jovian was unable to generate a new sample sheet for you"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the right files are present"
    exit 1
fi

exit 0
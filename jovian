#!/bin/bash
# shellcheck disable=SC1091
#set -euo pipefail
#set -v
#set -x

#load in standard vars
set -o allexport
[[ -f .env ]] && source .env
source bin/includes/functions
set +o allexport

eval "$(parse_yaml config/pipeline_parameters.yaml "params_")"
eval "$(parse_yaml config/config.yaml "configuration_")"

### Parse the jovian commandline arguments, if they are not part of jovian, they get send to Snakemake
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -i|--input)
        INPUT_DIR="$2"
        export INPUT_DIR
        shift # Next
        shift # Next
        ;;
        -m|--mode)
        JOVIAN_MODE="$2"
        export JOVIAN_MODE
        shift #Next
        shift #Next
        ;;
        -h|--help)
        JOVIAN_HELP="TRUE"
        export JOVIAN_HELP
        shift # Next
        ;;
        -sh|--snakemake-help)
        SNAKEMAKE_HELP="TRUE"
        export SNAKEMAKE_HELP
        shift # Next
        ;;
        -ic|--install-dependencies)
        INSTALL_CONDA_ENVS="TRUE"
        export INSTALL_CONDA_ENVS
        shift # Next
        ;;
        -id|--install-databases)
        INSTALL_DB="TRUE"
        export INSTALL_DB
        shift # Next
        ;;
        --clean)
        CLEAN="TRUE"
        export CLEAN
        shift # Next
        ;;
        --archive)
        ARCHIVE="TRUE"
        export ARCHIVE
        shift # Next
        ;;
        -v|--version)
        SHOW_VERSION="TRUE"
        export SHOW_VERSION
        shift # Next
        ;;
        --start-nginx)
        START_NGINX="TRUE"
        export START_NGINX
        shift # Next
        ;;
        --stop-nginx)
        STOP_NGINX="TRUE"
        export STOP_NGINX
        shift # Next
        ;;
        --rebuild-archive)
        REBUILD_ARCHIVE="TRUE"
        export REBUILD_ARCHIVE
        shift # Next
        ;;
        --configure-jupyter)
        CONFIG_JUP="TRUE"
        export CONFIG_JUP
        shift # Next
        ;;
        --start-jupyter)
        START_JUPYTER="TRUE"
        export START_JUPYTER
        shift # Next
        ;;
        -vt|--virus-typing)
        VIRUS_TYPING="TRUE"
        WHICH_TT="$2"
        export VIRUS_TYPING
        export WHICH_TT
        shift # Next
        shift # Next
        ;;
        -vt-force|--virus-typing-force)
        VIRUS_TYPING="TRUE"
        FORCE_OVERWRITE_TT="TRUE"
        WHICH_TT="$2"
        export VIRUS_TYPING
        export FORCE_OVERWRITE_TT
        export WHICH_TT
        shift # Next
        shift # Next
        ;;
        -vt-help|--virus-typing-help)
        VIRUS_TYPING="TRUE"
        VIRUS_TYPING_HELP="TRUE"
        export VIRUS_TYPING
        export VIRUS_TYPING_HELP
        shift # Next
        ;;
        --make-sample-sheet)
        MAKE_SAMPLE_SHEET="TRUE"
        export MAKE_SAMPLE_SHEET
        shift # Next
        ;;
        -y)
        SKIP_CONFIRMATION="TRUE"
        export SKIP_CONFIRMATION
        shift # Next
        ;;
        -u|--unlock)
        SNAKEMAKE_UNLOCK="TRUE"
        export SNAKEMAKE_UNLOCK
        shift # Next
        ;;
        --update)
        JOVIAN_UPDATE="TRUE"
        CHANGE_VERSION="$2"
        export JOVIAN_UPDATE
        export CHANGE_VERSION
        shift # Next
        shift # Next
        ;;
        *) # Any other option
        POSITIONAL+=("$1") # save in array
        shift # Next
        ;;
    esac
done
set -- "${POSITIONAL[@]:-}" # Restores the positional arguments (i.e. without the case arguments above) which then can be called via `$@` or `$[0-9]` etc. These parameters are send to Snakemake.

### Check the jovian CLI arguments and do stuff

### Show Jovian version
if [ "${SHOW_VERSION}" == "TRUE" ]; then
    bash bin/includes/Version
    exit 0
fi

### Remove all Jovian output
if [ "${CLEAN:-}" == "TRUE" ]; then
    bash bin/includes/Clean
    exit 0
fi

### Print Jovian help message
if [ "${JOVIAN_HELP:-}" == "TRUE" ]; then
    bash bin/includes/help
    exit 0
fi

###############################################################################################################
##### Installation block                                                                                  #####
###############################################################################################################

### Pre-flight check: Assess availability of required files, conda and Jovian_master environment
if ! bash bin/includes/Pre_install_checker; then
    exit 1
fi

if ! bash bin/includes/Install_miniconda; then
    exit 1
else
    set -o allexport
    source "${HOME}"/.bashrc
    set +o allexport
fi

if ! bash bin/includes/Install_jovian-master; then
    exit 1
else
    set -o allexport
    source activate "${MASTER_NAME}"
    set +o allexport
    echo -e "Succesfully activated Jovian_master environment"
fi

        ###############################################################################################################
        ##### From this point onwards you can safely assume Conda is installed and Jovian_master is activated     #####
        ###############################################################################################################


if [ "${JOVIAN_UPDATE}" == "TRUE" ]; then
    if [ -z "${CHANGE_VERSION}" ]; then
        bash bin/includes/selfupdate master
        exit 0
    else
        bash bin/includes/selfupdate "${CHANGE_VERSION}"
        exit
    fi
fi

### Archiving of relevant data in a single tar.gz file
if [ "${ARCHIVE:-}" == "TRUE" ]; then
    bash bin/includes/Archive
    exit 0
fi

### Install databases, as specified via CLI argument '-id'
if [ "${INSTALL_DB:-}" == "TRUE" ]; then
    bash bin/includes/Databases
    exit 0
fi

bash bin/includes/Userconfig_DB

bash bin/includes/Userconfig_CM


###############################################################################################################
##### End of installation block, from this point onwards you can safely assume Jovian_master is activated #####
###############################################################################################################

### Virus typing block, as specified via CLI argument '--virus-typing'
if [ "${VIRUS_TYPING:-}" == "TRUE" ]; then
    if [ "${VIRUS_TYPING_HELP:-}" == "TRUE" ]; then
        bash bin/scripts/virus_typing.sh --help
        exit 0
    elif [ "${FORCE_OVERWRITE_TT:-}" == "TRUE" ]; then
        bash bin/scripts/virus_typing.sh ${WHICH_TT} --force
        exit 0
    else
        bash bin/scripts/virus_typing.sh "${WHICH_TT}"
        exit 0
    fi
fi

#TODO the syntax below doesn't work if there are multiple archives. should really fix at some point.
if [ "${REBUILD_ARCHIVE}" == "TRUE" ]; then
    if [ -e archive_*.tar.gz ]; then
        bin/includes/Rebuild_archive
    exit 0
    else
        echo -e "There's no Jovian-archive present."
        exit 0
    fi
fi

### Print Snakemake help
if [ "${SNAKEMAKE_HELP:-}" == "TRUE" ]; then
    line
    snakemake --help
    exit 0
fi

### Check if this required BLAST alias file is present in HOME
bash bin/includes/Make_ncbirc


### Installation of Jovian specific conda environments
bash bin/includes/Install_conda_envs

### Start and stop commands for nginx
if [ "${START_NGINX}" == "TRUE" ]; then
    (bin/includes/Start_nginx start)
    exit 0
fi
if [ "${STOP_NGINX}" == "TRUE" ]; then
    nginx -s quit
    echo "nginx has been stopped"
    exit 0
fi

### * Auto configure the jupyter user profile and prepare it for direct use
if [ "${CONFIG_JUP}" == "TRUE" ]; then
    bash bin/includes/Config_jupyter
    exit 0
fi

if [ "${START_JUPYTER}" == "TRUE" ]; then
    bash bin/includes/Start_jupyter
    exit 0
fi

if ! bash bin/includes/Mode; then
    exit 1
fi


if ! bash bin/includes/Make_samplesheet; then
    exit 1
fi

if [ -e sample_sheet.yaml ]; then
    echo "sample sheet exists"
    set -o allexport
    SHEET_SUCCESS="TRUE"
    set +o allexport
fi


### Checker for succesfull creation of sample_sheet
if [ "${SHEET_SUCCESS}" == "TRUE" ]; then
    echo -e "Succesfully generated the sample sheet"
    ready_for_start
else
    echo "Something went wrong with the sample sheet, aborting jovian process..."
    exit 1
fi

if [ "${MAKE_SAMPLE_SHEET}" == "TRUE" ]; then
    echo -e "Jovian_run:\n    identifier: ${UNIQUE_ID}" > config/variables.yaml
    echo -e "Server_host:\n    hostname: http://${SET_HOSTNAME}" >> config/variables.yaml
    echo -e "The sample sheet and variables file has now been created, you can now run the Jovian snakefile manually"
    exit 0
fi

if [ "${SNAKEMAKE_UNLOCK}" == "TRUE" ]; then
    printf "\nUnlocking working directory...\n"
    snakemake -s bin/Snakefile --profile "${PROFILE}" --unlock
    printf "\nDone.\n"
    exit 0
fi

### Actual snakemake command with checkers for required files. N.B. here the UNIQUE_ID and SET_HOSTNAME variables are set!
if [ -e sample_sheet.yaml ]; then
    echo -e "Starting snakemake"
    set +ue #turn off bash strict mode because snakemake and conda can't work with it properly
    echo -e "Jovian_run:\n    identifier: ${UNIQUE_ID}" > config/variables.yaml
    echo -e "Server_host:\n    hostname: http://${HOSTNAME}" >> config/variables.yaml
    eval $(parse_yaml config/variables.yaml "config_")
    snakemake -s bin/Snakefile --profile "${PROFILE}" ${@} && echo -e "\nUnique identifier for this Jovian run is: $config_Jovian_run_identifier "
    set -ue #turn bash strict mode back on
else
    echo -e "Sample_sheet.yaml could not be found"
    echo -e "This also means that Jovian was unable to generate a new sample sheet for you"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the right files are present"
    exit 1
fi

exit 0 
#!/usr/bin/env python3
"""For each scaffold, merge the following data:
scaffold metrics, taxonomic classification after LCA,
virus host and disease information.

Usage:
  merge_data.py <sample_name> <scaffold_metrics> <Krona_LCA_taxonomy> <path_virushost_db> <path_rankedlineage_taxdump> <path_host_taxdump> <output_classified_scaffolds> <output_unclassified_scaffolds> <output_scaffolds_host>

<sample_name> is how you want to call this sample (in plain text).
<scaffold_metrics> is the BBtools generated scaffold metrics file.
<Krona_LCA_taxonomy> is the taxtab file generated by Krona after
the LCA analysis.
<path_virushost_db> is the location on your filesystem where the
virus-host database can be found (Mihara et al. 2016).
<path_rankedlineage_taxdump> is the location on your filesystem
where the NCBI "new_taxdump" file called "rankedlineage" can be found.
<path_host_taxdump> is the location on your filesystem
where the NCBI "new_taxdump" file called "host" can be found.
<output_classified_scaffolds> is the output file containing
the scaffolds with taxonomic classification data, i.e.
"classified" scaffolds.
<output_unclassified_scaffolds> is the output file containing
the scaffolds without taxonomic classification data, i.e.
"unclassified" scaffolds.
<output_scaffolds_host> is the output file containing the host
and disease information generated by cross-referencing the 
virus-host database (Mihara et al. 2016) and NCBI "host" database.

Example:
  python bin/merge_data.py [sample_name] \
    data/scaffolds_filtered/[sample_name]_perMinLenFiltScaffold.stats \
    data/taxonomic_classification/[sample_name].taxtab \
    data/scaffolds_filtered/[sample_name]_scaffolds_ge500nt.fasta \
    [path_to_virushost_DB] \
    [path_to_NCBI_newTaxdump_rankedlineage] \
    [path_to_NCBI_newTaxdump_host] \
    data/tables/[sample_name]_taxClassified.tsv \
    data/tables/[sample_name]_taxUnclassified.tsv \
    data/tables/[sample_name]_virusHost.tsv
"""

import pandas as pd
from sys import argv
from Bio import SeqIO

SCRIPT, SAMPLENAME, INPUTBBTOOLS, INPUTKRONA, INPUTSCAFFOLDS, VIRUSHOSTDB, PATH_TAXDUMP_RANKEDLINEAGE, PATH_TAXDUMP_HOST, OUTPUTFILE_CLASSIFIED_SCAFFOLDS_TAX_TABLE, OUTPUTFILE_UNCLASSIFIED_SCAFFOLDS_TAX_TABLE, OUTPUTFILE_VIRAL_SCAFFOLDS_HOSTS_TABLE = argv

perScaffoldStats = pd.read_csv(INPUTBBTOOLS, sep="\t", header=0)
kronaTaxLCA = pd.read_csv(INPUTKRONA, sep="\t", header=0)
virusHostDB = pd.read_csv(VIRUSHOSTDB, sep = "\t", header = 0)
scaffolds_dict = {"scaffold_name":[], "scaffold_seq":[]}
for seq_record in SeqIO.parse(INPUTSCAFFOLDS, "fasta"):
    scaffolds_dict["scaffold_name"].append(seq_record.id)
    scaffolds_dict["scaffold_seq"].append(str(seq_record.seq))
scaffoldsFasta = pd.DataFrame.from_dict(scaffolds_dict)
colnames_rankedlineage=["tax_id","tax_name","species","genus","family","order","class","phylum","kingdom","superkingdom"]
taxdump_rankedlineage = pd.read_csv(PATH_TAXDUMP_RANKEDLINEAGE, sep="|", header = None, names=colnames_rankedlineage, low_memory=False)
colnames_host=["tax_id","potential_hosts"]
taxdump_host = pd.read_csv(PATH_TAXDUMP_HOST, sep="|", header = None, names=colnames_host, low_memory=False)

taxLCA_with_stats = pd.merge(perScaffoldStats, kronaTaxLCA, how = "left", left_on = "#ID", right_on = "#queryID").drop("#queryID", axis = 1)
cols = list(taxLCA_with_stats.columns.values)
cols.pop(cols.index('taxID'))
cols.pop(cols.index('Avg. log e-value'))
cols.pop(cols.index('#ID'))
taxLCA_with_stats = taxLCA_with_stats[['#ID']+['taxID']+['Avg. log e-value']+cols]
taxLCA_with_stats_with_rankedlineage = pd.merge(taxLCA_with_stats, taxdump_rankedlineage, how = "left", left_on = "taxID", right_on = "tax_id").drop("tax_id", axis = 1)
cols = list(taxLCA_with_stats_with_rankedlineage.columns.values)
cols.pop(cols.index('#ID'))
cols.pop(cols.index('taxID'))
cols.pop(cols.index('Avg. log e-value'))
cols.pop(cols.index('tax_name'))
cols.pop(cols.index('species'))
cols.pop(cols.index('genus'))
cols.pop(cols.index('family'))
cols.pop(cols.index('order'))
cols.pop(cols.index('class'))
cols.pop(cols.index('phylum'))
cols.pop(cols.index('kingdom'))
cols.pop(cols.index('superkingdom'))
taxLCA_with_stats_with_rankedlineage = taxLCA_with_stats_with_rankedlineage[['#ID']+['taxID']+['tax_name']+['Avg. log e-value']+['species']+['genus']+['family']+['order']+['class']+['phylum']+['kingdom']+['superkingdom']+cols]
taxLCA_with_stats_with_rankedlineage_with_seq = pd.merge(taxLCA_with_stats_with_rankedlineage, scaffoldsFasta, how = "left", left_on = "#ID", right_on = "scaffold_name").drop("scaffold_name", axis = 1)
taxTable_classified_raw = taxLCA_with_stats_with_rankedlineage_with_seq.loc[taxLCA_with_stats_with_rankedlineage_with_seq['taxID'].notnull()]
taxTable_classified_raw.insert(loc = 0, column = 'Sample_name', value = [SAMPLENAME] * taxTable_classified_raw.shape[0])
taxTable_classified = taxTable_classified_raw
taxTable_classified.columns = taxTable_classified.columns.str.replace('\s+','_')
taxTable_unclassified_raw = taxLCA_with_stats_with_rankedlineage_with_seq.loc[taxLCA_with_stats_with_rankedlineage_with_seq['taxID'].isnull()].drop(["taxID","tax_name","Avg. log e-value","species","genus","family","order","class","phylum","kingdom","superkingdom"], axis = 1)
taxTable_unclassified_raw.insert(loc = 0, column = 'Sample_name', value = [SAMPLENAME] * taxTable_unclassified_raw.shape[0])
taxTable_unclassified = taxTable_unclassified_raw
taxTable_unclassified.columns = taxTable_unclassified.columns.str.replace('\s+','_')

taxTable_classified.to_csv(OUTPUTFILE_CLASSIFIED_SCAFFOLDS_TAX_TABLE, index = False, sep = "\t")
taxTable_unclassified.to_csv(OUTPUTFILE_UNCLASSIFIED_SCAFFOLDS_TAX_TABLE, index = False, sep = "\t")

virus_taxa_for_host_df = taxTable_classified.loc[taxTable_classified['superkingdom'] == "Viruses"].iloc[:,[0,1,2]]
virus_taxa_with_NCBIhosts = pd.merge(virus_taxa_for_host_df, taxdump_host, how="left", left_on="taxID", right_on="tax_id").drop("tax_id", axis = 1).rename(columns={'potential_hosts':'NCBI_potential_hosts'})
virusHost_table_raw = pd.merge(virus_taxa_with_NCBIhosts, virusHostDB, how="left", left_on="taxID", right_on="virus tax id").drop("virus tax id", axis = 1)
virusHost_table = virusHost_table_raw
virusHost_table.columns = virusHost_table.columns.str.replace('\s+','_')

virusHost_table.to_csv(OUTPUTFILE_VIRAL_SCAFFOLDS_HOSTS_TABLE, index = False, sep = "\t")
